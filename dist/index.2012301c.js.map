{"mappings":"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","sources":["<anon>","js/index.js"],"sourcesContent":["const token = \"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\"; //'YOUR_GITHUB_ACCESS_TOKEN';token\nconst repoOwner = \"nameZh1\"; //'YOUR_GITHUB_USERNAME';账户名\nconst repoName = \"img\"; //'YOUR_REPOSITORY_NAME';仓库名\n// 创建全局变量(当前所在路径)\nvar curryPath = \"/\";\nconst curryPathEle = document.getElementById(\"curryPath\");\nconst imageInput = document.getElementById(\"imageInput\"); // 获取图像文件上传输入元素\nconst treeShowEle = document.getElementById(\"treeShow\");\nconst imgShowEle = document.getElementById(\"imgShow\");\nfunction go(index) {\n    // add('img/icon');\n    // del('img/1.jpg');\n    // search();\n    // getShaForFile('img/1.jpg');\n    // searchTree('');\n    // console.log(index, 'from test')\n    getFolde(\"img\");\n}\n/**\r\n * 绑定事件 \r\n * author:zh1\r\n * date:2023年10月23日\r\n * */ document.getElementById(\"uploadButton\").addEventListener(\"click\", ()=>{\n    add(curryPath);\n    return;\n});\n/**\r\n * 增\r\n * 在guthub仓库中上传文件\r\n * 地址不存在时候，会自动创建文件夹\r\n * author:zh1\r\n * date:2023年10月23日\r\n */ function add(pathDir) {\n    // 检查用户是否选择了文件\n    if (imageInput.files.length === 0) {\n        console.log(\"\\u8BF7\\u5148\\u9009\\u62E9\\u8981\\u4E0A\\u4F20\\u7684\\u56FE\\u50CF\\u6587\\u4EF6\"); // 如果没有选择文件，显示提示并终止操作\n        return;\n    }\n    if (pathDir == \"/\") {\n        console.log(\"\\u8BF7\\u5148\\u9009\\u62E9\\u6587\\u4EF6\\u5939\");\n        return;\n    }\n    const file = imageInput.files[0]; // 获取用户选择的第一个图像文件\n    const formData = new FormData(); // 创建 FormData 对象，用于构建要上传的数据\n    formData.append(\"file\", file); // 将选定的文件添加到 FormData 对象中，使用 \"file\" 作为字段名称\n    const reader = new FileReader(); // 创建 FileReader 对象，用于读取文件内容\n    reader.readAsDataURL(file); // 读取文件内容并将其以DataURL格式读取\n    reader.onload = function() {\n        const content = reader.result.split(\",\")[1]; // 获取Base64编码后的文件内容\n        // 使用 fetch 方法向 GitHub 的 API 端点发送 PUT 请求，将图像文件内容上传到指定的 GitHub 仓库\n        fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/contents/${pathDir}/${file.name}`, {\n            method: \"PUT\",\n            headers: {\n                \"Authorization\": `token ${token}`\n            },\n            body: JSON.stringify({\n                message: \"Upload image\",\n                content: content,\n                branch: \"master\"\n            })\n        }).then((response)=>response.json()) // 解析响应的 JSON 数据\n        .then((data)=>{\n            const imageUrl = data.content.download_url; // 提取图像的下载链接\n            // 显示图片链接给用户\n            alert(\"\\u4E0A\\u4F20\\u6210\\u529F\\uFF0C\\u56FE\\u7247\\u94FE\\u63A5\\uFF1A\" + imageUrl);\n            // 更新\n            getImg(curryPath);\n        }).catch((error)=>{\n            console.error(error);\n        });\n    };\n}\n/**\r\n * 删\r\n * 删除github仓库的某个文件\r\n * 文件夹中文件删完就自动删除文件夹了（暂无批量\r\n * author:zh1\r\n * date:2023年10月23日\r\n */ // 通过 GitHub API 获取文件的 SHA(SHA为删除仓库文件的必须参数)\nasync function getShaForFile(filePath) {\n    const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}`;\n    const headers = {\n        \"Authorization\": `token ${token}`\n    };\n    const response = await fetch(apiUrl, {\n        headers\n    }).then((response)=>{\n        if (response.ok) return response.json();\n        else {\n            console.error(\"\\u83B7\\u53D6\\u6587\\u4EF6 SHA \\u5931\\u8D25\");\n            return null;\n        }\n    }).then((data)=>{\n        return data;\n    });\n    return response;\n}\nasync function del(filePath) {\n    // 获取文件的 SHA\n    const sha = await getShaForFile(filePath);\n    console.log(\"\\uD83D\\uDE80 ~ file: index.js:93 ~ del ~ sha:\", sha);\n    if (sha) {\n        // 使用 SHA 删除文件\n        const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}`;\n        const headers = {\n            \"Authorization\": `token ${token}`,\n            \"Content-Type\": \"application/json\"\n        };\n        const response = await fetch(apiUrl, {\n            method: \"DELETE\",\n            headers,\n            body: JSON.stringify({\n                message: \"Delete file\",\n                sha: sha.sha\n            })\n        });\n        if (response.ok) console.log(\"\\u6587\\u4EF6\\u5220\\u9664\\u6210\\u529F\");\n        else console.error(\"\\u6587\\u4EF6\\u5220\\u9664\\u5931\\u8D25\");\n    } else console.log(\"SHA\\u4E0D\\u5B58\\u5728\");\n}\n/**\r\n * 查\r\n * 获取github仓库的树结构\r\n * author:zh1\r\n * date:2023年10月23日\r\n */ // 有下载地址，适合图片懒加载\nasync function search() {\n    const path = \"\"; // 设置为空以获取整个仓库内容，或指定路径以获取特定目录\n    // 构建 API 请求的 URL\n    const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${path}`;\n    // 设置请求头，包括 GitHub 令牌\n    const headers = {\n        Authorization: `token ${token}`\n    };\n    // 树的文档片段\n    const treeFragment = document.createDocumentFragment();\n    // 发起 GET 请求获取仓库内容\n    fetch(apiUrl, {\n        headers\n    }).then((response)=>response.json()).then((data)=>{\n        console.log(data, \"qqq\");\n        let element = document.createElement(\"div\");\n        element.textContent = data[0].name;\n        element.className = \"imgContainer-content-left-treeNode\";\n        treeFragment.appendChild(element);\n        // 遍历并输出文件和目录\n        listContents(data);\n    }).catch((error)=>console.error(\"\\u53D1\\u751F\\u9519\\u8BEF\\uFF1A\", error));\n    // 遍历并输出文件和目录\n    function listContents(contents, level = 0) {\n        contents.forEach((item)=>{\n            const indent = \"  \".repeat(level);\n            if (item.type === \"dir\") // 递归获取子目录内容\n            fetch(item.url, {\n                headers\n            }).then((response)=>response.json()).then((subContents)=>{\n                // listContents(subContents, level + 1);\n                console.log(subContents, \"sub\");\n                subContents.forEach((subItem)=>{\n                    if (subItem.type == \"dir\") {\n                        let element = document.createElement(\"div\");\n                        element.textContent = subItem.name;\n                        element.setAttribute(\"url\", subItem.git_url);\n                        element.className = \"imgContainer-content-left-treeNode\";\n                        treeFragment.appendChild(element);\n                    }\n                });\n                treeShowEle.appendChild(treeFragment);\n            }).catch((error)=>console.error(\"\\u83B7\\u53D6\\u5B50\\u76EE\\u5F55\\u5185\\u5BB9\\u65F6\\u51FA\\u9519\\uFF1A\", error));\n        });\n    }\n}\n// 树结构\nasync function searchTree(filePath) {\n    const TREE_SHA_LIST = await getShaForFile(filePath);\n    // const TREE_SHA = TREE_SHA_LIST[0].sha\n    console.log(\"\\uD83D\\uDE80 ~ file: index.js:185 ~ searchTree ~ TREE_SHA:\", TREE_SHA_LIST);\n    // const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/git/trees/${TREE_SHA}`;\n    const apiUrl = TREE_SHA_LIST[0].git_url;\n    const headers = {\n        Authorization: `token ${token}`,\n        \"Content-Type\": \"application/json\",\n        \"X-GitHub-Api-Version\": \"2022-11-28\"\n    };\n    fetch(apiUrl, {\n        method: \"GET\",\n        headers\n    }).then((response)=>response.json()).then((data)=>{\n        // 这里可以处理从 GitHub 获取的数据（data）\n        console.log(data, \"tree\");\n    }).catch((error)=>{\n        console.error(error);\n    });\n}\n// 非树结构\nfunction getFolde(path) {\n    // const path = ''; // 设置为空以获取整个仓库内容，或指定路径以获取特定目录\n    // 构建 API 请求的 URL\n    const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${path}`;\n    // 设置请求头，包括 GitHub 令牌\n    const headers = {\n        Authorization: `token ${token}`\n    };\n    // 树的文档片段\n    const treeFragment = document.createDocumentFragment();\n    // 发起 GET 请求获取仓库内容\n    fetch(apiUrl, {\n        headers\n    }).then((response)=>response.json()).then((data)=>{\n        data.forEach((subItem)=>{\n            if (subItem.type == \"dir\") {\n                let element = document.createElement(\"div\");\n                element.textContent = subItem.name;\n                element.setAttribute(\"path\", subItem.path);\n                element.className = \"imgContainer-content-left-foldeNode\";\n                // 点击文件夹时间\n                element.addEventListener(\"click\", function(index) {\n                    const path = index.target.getAttribute(\"path\");\n                    curryPath = path;\n                    curryPathEle.textContent = path;\n                    getImg(path);\n                });\n                treeFragment.appendChild(element);\n            }\n        });\n        treeShowEle.appendChild(treeFragment);\n    }).catch((error)=>console.error(\"\\u53D1\\u751F\\u9519\\u8BEF\\uFF1A\", error));\n}\n/**\r\n * 渲染图片\r\n * author:zh1\r\n * date:2023年10月23日\r\n */ function getImg(path) {\n    //清理\n    while(imgShowEle.firstChild)imgShowEle.removeChild(imgShowEle.firstChild);\n    //更新\n    // 使用使用文档片段可以优化批量dom操作\n    const fragment = document.createDocumentFragment();\n    const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${path}`;\n    const headers = {\n        Authorization: `token ${token}`\n    };\n    fetch(apiUrl, {\n        headers\n    }).then((response)=>response.json()).then((data)=>{\n        data.forEach((item)=>{\n            if (item.type == \"file\") {\n                const eleContainer = document.createElement(\"div\");\n                eleContainer.className = \"imgContainer-content-mid-imgShow-item\";\n                const element = document.createElement(\"img\");\n                element.width = \"100%\";\n                element.height = \"100%\";\n                element.src = item.download_url; // 设置图片路径\n                element.setAttribute(\"download_url\", item.download_url);\n                element.setAttribute(\"name\", item.name);\n                element.className = \"imgContainer-content-mid-imgShow-itemImg\";\n                element.alt = \"\\u70B9\\u51FB\\u4E0B\\u8F7D\\u56FE\\u7247\";\n                element.addEventListener(\"click\", function(index) {\n                    // 这里可以定义点击事件的处理逻辑\n                    console.log(index, \"\\u56FE\\u7247\\u88AB\\u70B9\\u51FB\\u4E86\");\n                    // window.open(index.target.getAttribute('download_url'), '_blank');\n                    const downloadLink = document.createElement(\"a\");\n                    downloadLink.href = index.target.getAttribute(\"download_url\");\n                    downloadLink.target = \"_blank\";\n                    downloadLink.download = index.target.getAttribute(\"name\");\n                    downloadLink.click();\n                });\n                const nameTag = document.createElement(\"span\");\n                nameTag.className = \"imgContainer-content-mid-imgShow-itemTitle\";\n                nameTag.textContent = item.name;\n                eleContainer.appendChild(element);\n                eleContainer.appendChild(nameTag);\n                fragment.appendChild(eleContainer);\n            }\n        });\n        imgShowEle.appendChild(fragment);\n    });\n}\ngo();\n\n//# sourceMappingURL=index.2012301c.js.map\n","const token = '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';//'YOUR_GITHUB_ACCESS_TOKEN';token\r\nconst repoOwner = 'nameZh1';//'YOUR_GITHUB_USERNAME';账户名\r\nconst repoName = 'img';//'YOUR_REPOSITORY_NAME';仓库名\r\n// 创建全局变量(当前所在路径)\r\nvar curryPath = '/';\r\nconst curryPathEle = document.getElementById('curryPath');\r\nconst imageInput = document.getElementById('imageInput'); // 获取图像文件上传输入元素\r\nconst treeShowEle = document.getElementById('treeShow');\r\nconst imgShowEle = document.getElementById('imgShow');\r\n\r\nfunction go(index) {\r\n    // add('img/icon');\r\n    // del('img/1.jpg');\r\n    // search();\r\n    // getShaForFile('img/1.jpg');\r\n    // searchTree('');\r\n    // console.log(index, 'from test')\r\n    getFolde('img');\r\n}\r\n\r\n/**\r\n * 绑定事件 \r\n * author:zh1\r\n * date:2023年10月23日\r\n * */\r\ndocument.getElementById('uploadButton').addEventListener('click', () => {\r\n    add(curryPath);\r\n    return;\r\n});\r\n\r\n/**\r\n * 增\r\n * 在guthub仓库中上传文件\r\n * 地址不存在时候，会自动创建文件夹\r\n * author:zh1\r\n * date:2023年10月23日\r\n */\r\nfunction add(pathDir) {\r\n    // 检查用户是否选择了文件\r\n    if (imageInput.files.length === 0) {\r\n        console.log('请先选择要上传的图像文件'); // 如果没有选择文件，显示提示并终止操作\r\n        return;\r\n    }\r\n    if(pathDir == '/') {\r\n        console.log('请先选择文件夹');\r\n        return;\r\n    }\r\n\r\n    const file = imageInput.files[0]; // 获取用户选择的第一个图像文件\r\n\r\n    const formData = new FormData(); // 创建 FormData 对象，用于构建要上传的数据\r\n    formData.append('file', file); // 将选定的文件添加到 FormData 对象中，使用 \"file\" 作为字段名称\r\n\r\n    const reader = new FileReader(); // 创建 FileReader 对象，用于读取文件内容\r\n    reader.readAsDataURL(file); // 读取文件内容并将其以DataURL格式读取\r\n\r\n    reader.onload = function () {\r\n        const content = reader.result.split(',')[1]; // 获取Base64编码后的文件内容\r\n\r\n        // 使用 fetch 方法向 GitHub 的 API 端点发送 PUT 请求，将图像文件内容上传到指定的 GitHub 仓库\r\n        fetch(`https://api.github.com/repos/${repoOwner}/${repoName}/contents/${pathDir}/${file.name}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Authorization': `token ${token}`, // 使用 GitHub 访问令牌进行身份验证\r\n            },\r\n            body: JSON.stringify({\r\n                message: 'Upload image',\r\n                content: content, // 使用Base64编码后的内容\r\n                branch: 'master', // 分支名称，通常为 'main' 或 'master'\r\n            }),\r\n        })\r\n            .then(response => response.json()) // 解析响应的 JSON 数据\r\n            .then(data => {\r\n                const imageUrl = data.content.download_url; // 提取图像的下载链接\r\n                // 显示图片链接给用户\r\n                alert('上传成功，图片链接：' + imageUrl);\r\n                // 更新\r\n                getImg(curryPath);\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    };\r\n}\r\n\r\n/**\r\n * 删\r\n * 删除github仓库的某个文件\r\n * 文件夹中文件删完就自动删除文件夹了（暂无批量\r\n * author:zh1\r\n * date:2023年10月23日\r\n */\r\n// 通过 GitHub API 获取文件的 SHA(SHA为删除仓库文件的必须参数)\r\nasync function getShaForFile(filePath) {\r\n    const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}`;\r\n    const headers = {\r\n        'Authorization': `token ${token}`,\r\n    };\r\n\r\n    const response = await fetch(apiUrl, {\r\n        headers,\r\n    }).then(response => {\r\n        if (response.ok) {\r\n            return response.json()\r\n        } else {\r\n            console.error('获取文件 SHA 失败');\r\n            return null;\r\n        }\r\n    }).then(data => {\r\n        return data\r\n    });\r\n    return response;\r\n}\r\n\r\nasync function del(filePath) {\r\n    // 获取文件的 SHA\r\n    const sha = await getShaForFile(filePath);\r\n    console.log(\"🚀 ~ file: index.js:93 ~ del ~ sha:\", sha)\r\n\r\n    if (sha) {\r\n        // 使用 SHA 删除文件\r\n        const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}`;\r\n        const headers = {\r\n            'Authorization': `token ${token}`,\r\n            'Content-Type': 'application/json',\r\n        };\r\n\r\n        const response = await fetch(apiUrl, {\r\n            method: 'DELETE',\r\n            headers,\r\n            body: JSON.stringify({\r\n                message: 'Delete file',\r\n                sha: sha.sha, // 提供 SHA\r\n            }),\r\n        });\r\n\r\n        if (response.ok) {\r\n            console.log('文件删除成功');\r\n        } else {\r\n            console.error('文件删除失败');\r\n        }\r\n    } else {\r\n        console.log('SHA不存在')\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * 查\r\n * 获取github仓库的树结构\r\n * author:zh1\r\n * date:2023年10月23日\r\n */\r\n// 有下载地址，适合图片懒加载\r\nasync function search() {\r\n    const path = ''; // 设置为空以获取整个仓库内容，或指定路径以获取特定目录\r\n    // 构建 API 请求的 URL\r\n    const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${path}`;\r\n\r\n    // 设置请求头，包括 GitHub 令牌\r\n    const headers = {\r\n        Authorization: `token ${token}`\r\n    };\r\n\r\n    // 树的文档片段\r\n    const treeFragment = document.createDocumentFragment();\r\n\r\n    // 发起 GET 请求获取仓库内容\r\n    fetch(apiUrl, { headers })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            console.log(data, 'qqq')\r\n            let element = document.createElement('div');\r\n            element.textContent = data[0].name;\r\n            element.className = 'imgContainer-content-left-treeNode';\r\n            treeFragment.appendChild(element);\r\n            // 遍历并输出文件和目录\r\n            listContents(data);\r\n        })\r\n        .catch(error => console.error('发生错误：', error));\r\n\r\n    // 遍历并输出文件和目录\r\n    function listContents(contents, level = 0) {\r\n        contents.forEach(item => {\r\n            const indent = '  '.repeat(level);\r\n            if (item.type === 'dir') {\r\n                // 递归获取子目录内容\r\n                fetch(item.url, { headers })\r\n                    .then(response => response.json())\r\n                    .then(subContents => {\r\n                        // listContents(subContents, level + 1);\r\n                        console.log(subContents, 'sub')\r\n                        subContents.forEach(subItem => {\r\n                            if (subItem.type == \"dir\") {\r\n                                let element = document.createElement('div');\r\n                                element.textContent = subItem.name;\r\n                                element.setAttribute('url', subItem.git_url);\r\n                                element.className = 'imgContainer-content-left-treeNode';\r\n                                treeFragment.appendChild(element);\r\n                            }\r\n                        })\r\n                        treeShowEle.appendChild(treeFragment);\r\n                    })\r\n                    .catch(error => console.error('获取子目录内容时出错：', error));\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// 树结构\r\nasync function searchTree(filePath) {\r\n    const TREE_SHA_LIST = await getShaForFile(filePath);\r\n    // const TREE_SHA = TREE_SHA_LIST[0].sha\r\n    console.log(\"🚀 ~ file: index.js:185 ~ searchTree ~ TREE_SHA:\", TREE_SHA_LIST)\r\n    // const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/git/trees/${TREE_SHA}`;\r\n    const apiUrl = TREE_SHA_LIST[0].git_url;\r\n    const headers = {\r\n        Authorization: `token ${token}`,\r\n        'Content-Type': 'application/json',\r\n        'X-GitHub-Api-Version': '2022-11-28'\r\n    };\r\n\r\n    fetch(apiUrl, {\r\n        method: 'GET',\r\n        headers,\r\n    })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            // 这里可以处理从 GitHub 获取的数据（data）\r\n            console.log(data, 'tree')\r\n        })\r\n        .catch(error => {\r\n            console.error(error);\r\n        });\r\n\r\n}\r\n\r\n// 非树结构\r\nfunction getFolde(path) {\r\n    // const path = ''; // 设置为空以获取整个仓库内容，或指定路径以获取特定目录\r\n    // 构建 API 请求的 URL\r\n    const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${path}`;\r\n    // 设置请求头，包括 GitHub 令牌\r\n    const headers = {\r\n        Authorization: `token ${token}`\r\n    };\r\n    // 树的文档片段\r\n    const treeFragment = document.createDocumentFragment();\r\n    // 发起 GET 请求获取仓库内容\r\n    fetch(apiUrl, { headers })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            data.forEach(subItem => {\r\n                if (subItem.type == \"dir\") {\r\n                    let element = document.createElement('div');\r\n                    element.textContent = subItem.name;\r\n                    element.setAttribute('path', subItem.path);\r\n                    element.className = 'imgContainer-content-left-foldeNode';\r\n                    // 点击文件夹时间\r\n                    element.addEventListener('click', function (index) {\r\n                        const path = index.target.getAttribute('path');\r\n                        curryPath = path;\r\n                        curryPathEle.textContent = path;\r\n                        getImg(path);\r\n                    });\r\n                    treeFragment.appendChild(element);\r\n                }\r\n            })\r\n            treeShowEle.appendChild(treeFragment);\r\n\r\n        })\r\n        .catch(error => console.error('发生错误：', error));\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * 渲染图片\r\n * author:zh1\r\n * date:2023年10月23日\r\n */\r\n\r\nfunction getImg(path) {\r\n    //清理\r\n    while (imgShowEle.firstChild) {\r\n        imgShowEle.removeChild(imgShowEle.firstChild);\r\n    }\r\n    //更新\r\n    // 使用使用文档片段可以优化批量dom操作\r\n    const fragment = document.createDocumentFragment();\r\n    const apiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${path}`;\r\n    const headers = {\r\n        Authorization: `token ${token}`\r\n    };\r\n    fetch(apiUrl, { headers }).then(response => response.json())\r\n        .then(data => {\r\n            data.forEach(item => {\r\n                if (item.type == 'file') {\r\n                    const eleContainer = document.createElement('div');\r\n                    eleContainer.className = 'imgContainer-content-mid-imgShow-item';\r\n                    const element = document.createElement('img');\r\n                    element.width = \"100%\";\r\n                    element.height = \"100%\";\r\n                    element.src = item.download_url; // 设置图片路径\r\n                    element.setAttribute('download_url', item.download_url);\r\n                    element.setAttribute('name', item.name);\r\n                    element.className = 'imgContainer-content-mid-imgShow-itemImg';\r\n                    element.alt = '点击下载图片';\r\n                    element.addEventListener('click', function (index) {\r\n                        // 这里可以定义点击事件的处理逻辑\r\n                        console.log(index, '图片被点击了');\r\n                        // window.open(index.target.getAttribute('download_url'), '_blank');\r\n                        const downloadLink = document.createElement('a');\r\n                        downloadLink.href = index.target.getAttribute('download_url');\r\n                        downloadLink.target = '_blank';\r\n                        downloadLink.download = index.target.getAttribute('name');; // 设置下载的文件名\r\n                        downloadLink.click();\r\n                    });\r\n                    const nameTag = document.createElement('span');\r\n                    nameTag.className = 'imgContainer-content-mid-imgShow-itemTitle';\r\n                    nameTag.textContent = item.name;\r\n                    eleContainer.appendChild(element);\r\n                    eleContainer.appendChild(nameTag);\r\n                    fragment.appendChild(eleContainer);\r\n                }\r\n            });\r\n            imgShowEle.appendChild(fragment);\r\n        })\r\n}\r\n\r\ngo();\r\n"],"names":["token","repoOwner","curryPath","curryPathEle","document","getElementById","imageInput","treeShowEle","imgShowEle","getImg","path","firstChild","removeChild","fragment","createDocumentFragment","apiUrl","headers","Authorization","fetch","then","response","json","data","forEach","item","type","eleContainer","createElement","className","element","width","height","src","download_url","setAttribute","name","alt","addEventListener","index","console","log","downloadLink","href","target","getAttribute","download","click","nameTag","textContent","appendChild","add","pathDir","files","length","file","formData","FormData","append","reader","FileReader","readAsDataURL","onload","content","result","split","method","body","JSON","stringify","message","branch","imageUrl","alert","catch","error","treeFragment","subItem"],"version":3,"file":"index.2012301c.js.map"}